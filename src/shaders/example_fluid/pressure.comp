// Implementatin of a basic incompressible, homogeneous fluid simulation. See https://www.dgp.toronto.edu/public_user/stam/reality/Research/pdf/ns.pdf, https://developer.nvidia.com/gpugems/gpugems/part-vi-beyond-triangles/chapter-38-fast-fluid-dynamics-simulation-gpu, https://github.com/PavelDoGreat/WebGL-Fluid-Simulation/tree/master.
#version 460
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_GOOGLE_include_directive : require

// Use a toggle to invert which buffer is read from and which is written to.
layout(constant_id = 0) const bool read_from_alpha = false;

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 2, r32f) readonly uniform image2D divergence_texture;
layout(set = 0, binding = 3, r32f) uniform image2D alpha_pressure;
layout(set = 0, binding = 4, r32f) uniform image2D beta_pressure;

#include "shared.glsl"

// Use the most recent pressure data and the divergence field to update the pressure field.
void main() {
  const ivec2 coords = ivec2(gl_GlobalInvocationID.xy);
  if(coords.x >= push_constants.screen_size.x || coords.y >= push_constants.screen_size.y) {
    return;
  }

  const float divergence = imageLoad(divergence_texture, coords).x;

  // Use a compile-time specialization constant to determine which buffer to read from and which to write to.
  // The remaining logic is the same for both cases.
  if(read_from_alpha) {
    const float pressure_left = imageLoad(alpha_pressure, coords - ivec2(1, 0)).x;
    const float pressure_right = imageLoad(alpha_pressure, coords + ivec2(1, 0)).x;
    const float pressure_top = imageLoad(alpha_pressure, coords + ivec2(0, 1)).x;
    const float pressure_bottom = imageLoad(alpha_pressure, coords - ivec2(0, 1)).x;
    const float pressure_center = imageLoad(alpha_pressure, coords).x;

    const float new_pressure = (pressure_left + pressure_right + pressure_top + pressure_bottom - divergence) * 0.25;
    imageStore(beta_pressure, coords, vec4(new_pressure, 0, 0, 0));
  } else {
    const float pressure_left = imageLoad(beta_pressure, coords - ivec2(1, 0)).x;
    const float pressure_right = imageLoad(beta_pressure, coords + ivec2(1, 0)).x;
    const float pressure_top = imageLoad(beta_pressure, coords + ivec2(0, 1)).x;
    const float pressure_bottom = imageLoad(beta_pressure, coords - ivec2(0, 1)).x;
    const float pressure_center = imageLoad(beta_pressure, coords).x;

    const float new_pressure = (pressure_left + pressure_right + pressure_top + pressure_bottom - divergence) * 0.25;
    imageStore(alpha_pressure, coords, vec4(new_pressure, 0, 0, 0));
  }
}
