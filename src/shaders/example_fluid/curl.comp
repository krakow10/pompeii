// Implementatin of a basic incompressible, homogeneous fluid simulation. See https://www.dgp.toronto.edu/public_user/stam/reality/Research/pdf/ns.pdf, https://developer.nvidia.com/gpugems/gpugems/part-vi-beyond-triangles/chapter-38-fast-fluid-dynamics-simulation-gpu, https://github.com/PavelDoGreat/WebGL-Fluid-Simulation/tree/master.
#version 460
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0, rg32f) readonly uniform image2D input_velocity;
layout(set = 0, binding = 1, r32f) writeonly uniform image2D curl_texture;

#include "shared.glsl"

// Perform a `curl` calculation. NOTE: I'm not confident this is actually a vector-field curl, but it is named as-such.
void main() {
  const ivec2 coords = ivec2(gl_GlobalInvocationID.xy);
  if(coords.x >= push_constants.screen_size.x || coords.y >= push_constants.screen_size.y) {
    return;
  }

  const float velocity_left = imageLoad(input_velocity, coords - ivec2(1, 0)).y;
  const float velocity_right = imageLoad(input_velocity, coords + ivec2(1, 0)).y;
  const float velocity_top = imageLoad(input_velocity, coords + ivec2(0, 1)).x;
  const float velocity_bottom = imageLoad(input_velocity, coords - ivec2(0, 1)).x;

  const float new_curl = 0.5 * (velocity_right - velocity_left - velocity_top + velocity_bottom);

  // Calculate the curl and apply it to the storage buffer.
  imageStore(curl_texture, coords, vec4(new_curl, 0, 0, 0));
}
