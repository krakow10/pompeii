// Implementatin of a basic incompressible, homogeneous fluid simulation. See https://www.dgp.toronto.edu/public_user/stam/reality/Research/pdf/ns.pdf, https://developer.nvidia.com/gpugems/gpugems/part-vi-beyond-triangles/chapter-38-fast-fluid-dynamics-simulation-gpu, https://github.com/PavelDoGreat/WebGL-Fluid-Simulation/tree/master.
#version 460
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0, rg32f) readonly uniform image2D input_velocity;
layout(set = 0, binding = 2, r32f) writeonly uniform image2D divergence_texture;
layout(set = 0, binding = 3, r32f) uniform image2D alpha_pressure;

#include "shared.glsl"

// Calculate the divergence of the velocity field and store it in the output texture.
void main() {
  const ivec2 coords = ivec2(gl_GlobalInvocationID.xy);
  if(coords.x >= push_constants.screen_size.x || coords.y >= push_constants.screen_size.y) {
    return;
  }

  float velocity_left = imageLoad(input_velocity, coords - ivec2(1, 0)).x;
  float velocity_right = imageLoad(input_velocity, coords + ivec2(1, 0)).x;
  float velocity_top = imageLoad(input_velocity, coords + ivec2(0, 1)).y;
  float velocity_bottom = imageLoad(input_velocity, coords - ivec2(0, 1)).y;

  // Invert the sign of velocity components when the neighbor is a texture boundary.
  const vec2 velocity_center = imageLoad(input_velocity, coords).xy;
  if(coords.x == 0) {
    velocity_left = -velocity_center.x;
  } else if(coords.x == push_constants.screen_size.x - 1) {
    velocity_right = -velocity_center.x;
  }

  if(coords.y == 0) {
    velocity_bottom = -velocity_center.y;
  } else if(coords.y == push_constants.screen_size.y - 1) {
    velocity_top = -velocity_center.y;
  }

  const float divergence = 0.5 * (velocity_right - velocity_left + velocity_top - velocity_bottom);

  // Calculate the divergence of the velocity field.
  imageStore(divergence_texture, coords, vec4(divergence, 0, 0, 0));

  // Reduce the pressure at this pixel.
  const float pressure = imageLoad(alpha_pressure, coords).x;
  imageStore(alpha_pressure, coords, vec4(0.6*pressure, 0, 0, 0));
}
