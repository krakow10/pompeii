// Implementatin of a basic incompressible, homogeneous fluid simulation. See https://www.dgp.toronto.edu/public_user/stam/reality/Research/pdf/ns.pdf, https://developer.nvidia.com/gpugems/gpugems/part-vi-beyond-triangles/chapter-38-fast-fluid-dynamics-simulation-gpu, https://github.com/PavelDoGreat/WebGL-Fluid-Simulation/tree/master.
#version 460
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0, rg32f) readonly uniform image2D input_velocity;
layout(set = 0, binding = 5, rg32f) writeonly uniform image2D output_velocity;
layout(set = 0, binding = 6, rgba32f) readonly uniform image2D input_dye;
layout(set = 0, binding = 7, rgba32f) writeonly uniform image2D output_dye;

#include "shared.glsl"

vec2 bilerp_velocity(vec2 uv) {
  vec2 st = uv - 0.5;
  vec2 iuv = floor(st);
  vec2 fuv = fract(st);

  vec2 a = imageLoad(input_velocity, ivec2(iuv + vec2(0.5, 0.5))).xy;
  vec2 b = imageLoad(input_velocity, ivec2(iuv + vec2(1.5, 0.5))).xy;
  vec2 c = imageLoad(input_velocity, ivec2(iuv + vec2(0.5, 1.5))).xy;
  vec2 d = imageLoad(input_velocity, ivec2(iuv + vec2(1.5, 1.5))).xy;

  return mix(mix(a, b, fuv.x), mix(c, d, fuv.x), fuv.y);
}

vec4 bilerp_dye(vec2 uv) {
  vec2 st = uv - 0.5;
  vec2 iuv = floor(st);
  vec2 fuv = fract(st);

  vec4 a = imageLoad(input_dye, ivec2(iuv + vec2(0.5, 0.5)));
  vec4 b = imageLoad(input_dye, ivec2(iuv + vec2(1.5, 0.5)));
  vec4 c = imageLoad(input_dye, ivec2(iuv + vec2(0.5, 1.5)));
  vec4 d = imageLoad(input_dye, ivec2(iuv + vec2(1.5, 1.5)));

  return mix(mix(a, b, fuv.x), mix(c, d, fuv.x), fuv.y);
}

// Perform the main advection step of the fluid simulation along the velocity and dye fields.
void main() {
  const ivec2 coords = ivec2(gl_GlobalInvocationID.xy);
  // TODO: Consider using `imageSize(..)` to get the texture size.
  if(coords.x >= push_constants.screen_size.x || coords.y >= push_constants.screen_size.y) {
    return;
  }

  const vec2 velocity = bilerp_velocity(coords);

  // Move the field texture coordinates backwards along the velocity vector to get a reference coordinate for advection.
  // Add 0.5 to the coordinates to sample the texture at the center of the pixel.
  const vec2 reference_coord = gl_GlobalInvocationID.xy + vec2(0.5) - push_constants.delta_time * velocity;

  const float velocity_diffusion = exp(-push_constants.velocity_diffusion_rate * push_constants.delta_time);
  vec2 new_velocity = velocity_diffusion * bilerp_velocity(reference_coord);

  const float dye_diffusion = exp(-push_constants.dye_diffusion_rate * push_constants.delta_time);
  vec3 new_dye = dye_diffusion * bilerp_dye(reference_coord).rgb;

  // Apply additional velocity and fluid from the cursor. Use ~1/70th of the screen size as a distance threshold.
  const vec2 cursor_distance = 70.0 * (push_constants.cursor_position - gl_GlobalInvocationID.xy) / max(1, min(push_constants.screen_size.x, push_constants.screen_size.y));
  const float cursor_effect = push_constants.cursor_dye.a*exp(-dot(cursor_distance, cursor_distance));
  new_velocity = mix(new_velocity, push_constants.cursor_velocity, cursor_effect);
  new_dye = mix(new_dye, push_constants.cursor_dye.rgb, cursor_effect);

  imageStore(output_velocity, coords, vec4(new_velocity, 0, 0));
  imageStore(output_dye, coords, vec4(new_dye, 1));
}
